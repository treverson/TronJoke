{"version":3,"sources":["assets/banner.png","components/Message/index.js","components/Featured/index.js","components/TronLinkGuide/index.js","utils/index.js","components/App/index.js","index.js","components/TronLinkGuide/TronLinkLogo.png","components/App/tronjoke.png"],"names":["module","exports","__webpack_require__","p","Message","props","_props$message","message","owner","timestamp","tips","messageID","featured","tippable","requiresTronLink","onTip","react_default","a","createElement","className","onClick","lib","style","width","height","marginBottom","autoHide","moment","fromNow","count","amount","toLocaleString","Featured","recent","currentAddress","tronLinkInstalled","messages","sort","b","map","components_Message","key","WEBSTORE_URL","logo","src","TronLinkLogo","alt","openTronLink","window","open","TronLinkGuide","_props$installed","installed","href","target","rel","utils","tronWeb","contract","setTronWeb","_setTronWeb","Object","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","this","at","sent","stop","_x","apply","arguments","transformMessage","tippers","toNumber","address","fromHex","creator","time","fetchMessages","_fetchMessages","_callee2","i","totalMessages","min","messageIDs","_this","_args2","_context2","length","undefined","topPosts","call","abrupt","push","current","Math","max","toConsumableArray","Set","Array","fill","_","index","concat","Promise","all","then","forEach","fetchMessage","_fetchMessage","_callee3","_ref","_ref$recent","_ref$featured","vulnerable","_context3","keys","filter","includes","splice","_x2","_x3","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","state","loggedIn","currentMessage","loading","onMessageEdit","bind","assertThisInitialized","onMessageSend","onMessageTip","showZuixin","showZuire","resolve","tronWebState","ready","_this2","setState","tries","timer","setInterval","TronWeb","clearInterval","defaultAddress","hex","toHex","base58","on","Utils","startEventListener","_this3","MessagePosted","watch","err","result","console","error","log","id","value","_ref3","_this4","_this$state$currentMe","trim","postMessage","send","shouldPollResponse","callValue","res","Swal","title","type","catch","hasOwnProperty","text","confirmButtonText","input","showCancelButton","showLoaderOnConfirm","reverseButtons","allowOutsideClick","isLoading","allowEscapeKey","preConfirm","isNaN","showValidationMessage","tipMessage","Number","placeholder","onChange","components_TronLinkGuide","$","addClass","removeClass","show","hide","_this5","_this$state$messages","entries","_ref5","_ref6","slicedToArray","TronLogo","renderMessageInput","components_Featured","class","React","Component","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.4d9b4dc9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/banner.4c3553e3.png\";","import React from 'react';\nimport moment from 'moment';\n\nimport { Scrollbars } from 'react-custom-scrollbars';\n\nimport './Message.scss';\n\nconst Message = props => {\n    const {\n        message: {\n            message,\n            owner,\n            timestamp,\n            tips\n        },\n        messageID,\n        featured,\n        tippable,\n        requiresTronLink,\n        onTip\n    } = props;\n\n    return (\n        <div className='message-wrapper'>\n            <div className={ 'message' + (tippable ? ' tippable' : '') + (requiresTronLink ? ' requiresTronLink' : '') } onClick={ () => onTip(messageID) }>\n                <div className='header'>\n                    <div className='owner'>\n                        { owner }\n                    </div>\n                    { featured && <div className='star'>\n                        &#9733;\n                    </div> }\n                </div>\n                <Scrollbars style={{ width: 330, height: 85, marginBottom: 6 }} autoHide>\n                    <div className='body'>\n                        { message }\n                    </div>\n                </Scrollbars>\n                <div className='footer-message'>\n                    <div className='timestamp'>\n                        { moment(timestamp * 1000).fromNow() }\n                    </div>\n                    { tips.count ? <div className='tips'>\n                      打赏总额\n                        <strong>{ (tips.amount / 1000000).toLocaleString() } TRX</strong> \n                    </div> : '' }\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Message;\n","import React from 'react';\nimport Message from 'components/Message';\n\nimport { Scrollbars } from 'react-custom-scrollbars';\n\nimport './Featured.scss';\n\nconst Featured = props => {\n    const {\n        recent,\n        featured,\n        currentAddress,\n        tronLinkInstalled,\n        onTip\n    } = props;\n\n    const messages = featured.sort((a, b) => recent[b].tips.amount - recent[a].tips.amount).map(messageID => (\n        <Message\n            message={ recent[messageID] }\n            featured={ true }\n            key={ messageID }\n            messageID={ messageID }\n            tippable={ recent[messageID].owner !== currentAddress }\n            requiresTronLink={ !tronLinkInstalled }\n            onTip={ onTip } />\n    ));\n\n    return (\n        <div className='messages'>\n          { messages }\n        </div>\n    );\n};\n\nexport default Featured;\n","import React from 'react';\n\nimport TronLinkLogo from './TronLinkLogo.png';\nimport './TronLinkGuide.scss';\n\nconst WEBSTORE_URL = 'https://chrome.google.com/webstore/detail/ibnejdfjmmkpcnlpebklmnkoeoihofec/';\n\nconst logo = (\n    <div className='logo'>\n        <img src={ TronLinkLogo } alt='TronLink logo' />\n    </div>\n);\n\nconst openTronLink = () => {\n    window.open(WEBSTORE_URL, '_blank');\n};\n\nconst TronLinkGuide = props => {\n    const {\n        installed = false\n    } = props;\n\n    if(!installed) {\n        return (\n            <div className='tronLink' onClick={ openTronLink }>\n                <div className='info'>\n                    <h1>需要安装TronLink</h1>\n                    <p>\n                        要发帖或者点赞, 你必须安装TronLink. TronLink是一个浏览器波场钱包, 可以从<a href={ WEBSTORE_URL } target='_blank' rel='noopener noreferrer'>Chrome应用商店下载</a>.\n                        安装后, 需要刷新此页面.\n                    </p>\n                </div>\n                { logo }\n            </div>\n        );\n    }\n\n    return (\n        <div className='tronLink hover' onClick={ openTronLink }>\n            <div className='info'>\n                <h1>Log in Required</h1>\n                <p>\n                    需要登录TronLink. \n                </p>\n            </div>\n            { logo }\n        </div>\n    );\n};\n\nexport default TronLinkGuide;\n","// const contractAddress = 'TUroB5BWZYzGZnzzRzjxyNqRXtvkbBuJQM'\n// const contractAddress = 'TQyXdrUaZaw155WrB3F3HAZZ3EeiLVx4V2'\nconst contractAddress = 'THpH82RJuiZa1oJyFG7QWoZZwbTJuYwnR2'\n\nconst utils = {\n    tronWeb: false,\n    contract: false,\n\n    async setTronWeb(tronWeb) {\n        this.tronWeb = tronWeb;\n        this.contract = await tronWeb.contract().at(contractAddress)\n    },\n\n    transformMessage(message) {\n        return {\n            tips: {\n                amount: message.tips,\n                count: message.tippers.toNumber()\n            },\n            owner: this.tronWeb.address.fromHex(message.creator),\n            timestamp: message.time.toNumber(),\n            message: message.message\n        }\n    },\n\n    async fetchMessages(recent = {}, featured = []) {\n        // Try to fetch messageID's of top 20 tipped messages (or until there are no more)\n        for(let i = 0; i < 20; i++) {\n            const message = await this.contract.topPosts(i).call();\n\n            if(message.toNumber() === 0)\n                break; // End of tips array\n\n            featured.push(\n                message.toNumber()\n            );\n        }\n\n        // Fetch Max(30) most recent messages\n        const totalMessages = (await this.contract.current().call()).toNumber();\n        const min = Math.max(1, totalMessages - 30);\n\n        const messageIDs = [ ...new Set([\n            ...new Array(totalMessages - min).fill().map((_, index) => min + index),\n            ...featured\n        ])];\n\n        await Promise.all(messageIDs.map(messageID => (\n            this.contract.messages(messageID).call()\n        ))).then(messages => messages.forEach((message, index) => {\n            const messageID = +messageIDs[index];\n\n            recent[messageID] = this.transformMessage(message);\n        }));\n\n        return {\n            featured,\n            recent\n        };\n    },\n\n    async fetchMessage(messageID, { recent = {}, featured = [] }) {\n        const message = await this.contract.messages(messageID).call();\n        const vulnerable = Object.keys(recent).filter(messageID => (\n            !featured.includes(messageID)\n        )).sort((a, b) => (\n            recent[b].timestamp - recent[a].timestamp\n        ));\n\n        recent[messageID] = this.transformMessage(message);\n\n        if(vulnerable.length > 30) {\n            const removed = vulnerable.splice(0, vulnerable.length - 30);\n\n            removed.forEach(messageID => {\n                delete recent[messageID];\n            });\n        }\n\n        return {\n            message: recent[messageID],\n            recent,\n            featured\n        };\n    }\n};\n\nexport default utils;\n","import React from 'react';\nimport Message from 'components/Message';\nimport Featured from 'components/Featured';\nimport TronLinkGuide from 'components/TronLinkGuide';\nimport TronWeb from 'tronweb';\nimport Utils from 'utils';\nimport Swal from 'sweetalert2';\nimport banner from 'assets/banner.png';\nimport $ from  'jquery';\n\nimport './App.scss';\nimport TronLogo from './tronjoke.png';\n\nconst FOUNDATION_ADDRESS = 'TWiWt5SEDzaEqS6kE5gandWMNfxR2B5xzg';\n\nclass App extends React.Component {\n    state = {\n        tronWeb: {\n            installed: false,\n            loggedIn: false\n        },\n        currentMessage: {\n            message: '',\n            loading: false\n        },\n        messages: {\n            recent: {},\n            featured: []\n        }\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.onMessageEdit = this.onMessageEdit.bind(this);\n        this.onMessageSend = this.onMessageSend.bind(this);\n        this.onMessageTip = this.onMessageTip.bind(this);\n        this.showZuixin = this.showZuixin.bind(this);\n        this.showZuire = this.showZuire.bind(this);\n    }\n\n    async componentDidMount() {\n        await new Promise(resolve => {\n            const tronWebState = {\n                installed: !!window.tronWeb,\n                loggedIn: window.tronWeb && window.tronWeb.ready\n            };\n\n            if(tronWebState.installed) {\n                this.setState({\n                    tronWeb:\n                    tronWebState\n                });\n\n                return resolve();\n            }\n\n            let tries = 0;\n\n            const timer = setInterval(() => {\n                if(tries >= 10) {\n                    const TRONGRID_API = 'https://api.trongrid.io';\n\n                    window.tronWeb = new TronWeb(\n                        TRONGRID_API,\n                        TRONGRID_API,\n                        TRONGRID_API\n                    );\n\n                    this.setState({\n                        tronWeb: {\n                            installed: false,\n                            loggedIn: false\n                        }\n                    });\n\n                    clearInterval(timer);\n                    return resolve();\n                }\n\n                tronWebState.installed = !!window.tronWeb;\n                tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\n\n                if(!tronWebState.installed) {\n                    return tries++;\n                } else {\n                    clearInterval(timer);\n                    return resolve();\n                }\n\n                this.setState({\n                    tronWeb: tronWebState\n                });\n\n                resolve();\n            }, 1000);\n        });\n\n        if(!this.state.tronWeb.loggedIn) {\n            // Set default address (foundation address) used for contract calls\n            // Directly overwrites the address object as TronLink disabled the\n            // function call\n            window.tronWeb.defaultAddress = {\n                hex: window.tronWeb.address.toHex(FOUNDATION_ADDRESS),\n                base58: FOUNDATION_ADDRESS\n            };\n\n            window.tronWeb.on('addressChanged', () => {\n                if(this.state.tronWeb.loggedIn)\n                    return;\n\n                this.setState({\n                    tronWeb: {\n                        installed: true,\n                        loggedIn: true\n                    }\n                });\n            });\n        }\n\n        await Utils.setTronWeb(window.tronWeb);\n\n        this.startEventListener();\n        this.fetchMessages();\n    }\n\n    // Polls blockchain for smart contract events\n    startEventListener() {\n        Utils.contract.MessagePosted().watch((err, { result }) => {\n            if(err)\n                return console.error('Failed to bind event listener:', err);\n\n            console.log('Detected new message:', result.id);\n            this.fetchMessage(+result.id);\n        });\n    }\n\n    async fetchMessages() {\n        this.setState({\n            messages: await Utils.fetchMessages()\n        });\n    }\n\n    async fetchMessage(messageID) {\n        const {\n            recent,\n            featured,\n            message\n        } = await Utils.fetchMessage(messageID, this.state.messages);\n\n        this.setState({\n            messages: {\n                recent,\n                featured\n            }\n        });\n\n        return message;\n    }\n\n    // Stores value of textarea to state\n    onMessageEdit({ target: { value } }) {\n        if(this.state.currentMessage.loading)\n            return;\n\n        this.setState({\n            currentMessage: {\n                message: value,\n                loading: false\n            }\n        });\n    }\n\n    // Submits message to the blockchain\n    onMessageSend() {\n        const {\n            loading,\n            message\n        } = this.state.currentMessage;\n\n        if(loading)\n            return;\n\n        if(!message.trim().length)\n            return;\n\n        this.setState({\n            currentMessage: {\n                loading: true,\n                message\n            }\n        });\n\n        Utils.contract.postMessage(message).send({\n            shouldPollResponse: true,\n            callValue: 10000000\n        }).then(res => Swal({\n            title: 'Post Created',\n            type: 'success'\n        })).catch(err => Swal({\n            title: 'Post Failed',\n            type: 'error'\n        })).then(() => {\n            this.setState({\n                currentMessage: {\n                    loading: false,\n                    message\n                }\n            });\n        });\n    }\n\n    // Tips a message with a specific amount\n    async onMessageTip(messageID) {\n        const messages = {\n            ...this.state.messages.recent,\n            ...this.state.messages.featured\n        };\n\n        if(!messages.hasOwnProperty(messageID))\n            return;\n\n        if(!this.state.tronWeb.loggedIn)\n            return;\n\n        if(messages[messageID].owner === Utils.tronWeb.defaultAddress.base58)\n            return;\n\n        const { value } = await Swal({\n            title: 'Tip Message',\n            text: 'Enter tip amount in TRX',\n            confirmButtonText: 'Tip',\n            input: 'text',\n            showCancelButton: true,\n            showLoaderOnConfirm: true,\n            reverseButtons: true,\n            allowOutsideClick: () => !Swal.isLoading(),\n            allowEscapeKey: () => !Swal.isLoading(),\n            preConfirm: amount => {\n                if(isNaN(amount) || amount <= 0) {\n                    Swal.showValidationMessage('Invalid tip amount provided');\n                    return false;\n                }\n\n                return Utils.contract.tipMessage(+messageID).send({\n                    callValue: Number(amount) * 1000000\n                }).then(() => true).catch(err => {\n                    Swal.showValidationMessage(err);\n                });\n            }\n        });\n\n        value && Swal({\n            title: 'Message Tipped',\n            type: 'success'\n        });\n    }\n\n    renderMessageInput() {\n        if(!this.state.tronWeb.installed)\n            return <TronLinkGuide />;\n\n        if(!this.state.tronWeb.loggedIn)\n            return <TronLinkGuide installed />;\n\n        return (\n            <div className={ 'messageInput' + (this.state.currentMessage.loading ? ' loading' : '') }>\n                <textarea\n                    placeholder='段友出征, 寸草不生'\n                    value={ this.state.currentMessage.message }\n                    onChange={ this.onMessageEdit }></textarea>\n                <div className='footerx'>\n                    <div className='warning'>\n                        发帖费用10TRX\n                    </div>\n                    <div className=\"button is-success\" onClick={ this.onMessageSend }> 发帖 </div>\n                </div>\n            </div>\n        );\n    }\n\n    showZuixin() {\n        $(\"#tab-all\").addClass(\"is-active\");\n        $(\"#tab-all\").addClass(\"active\");\n        $(\"#tab-my\").removeClass(\"is-active\");\n        $(\"#tab-my\").removeClass(\"active\");\n        $(\"#all-content\").show();\n        $(\"#my-content\").hide();\n    }\n      \n    showZuire() {\n        $(\"#tab-my\").addClass(\"is-active\");\n        $(\"#tab-my\").addClass(\"active\");\n        $(\"#tab-all\").removeClass(\"is-active\");\n        $(\"#tab-all\").removeClass(\"active\");\n        $(\"#my-content\").show();\n        $(\"#all-content\").hide();\n    }\n\n    render() {\n        const {\n            recent,\n            featured\n        } = this.state.messages;\n\n        const messages = Object.entries(recent).sort((a, b) => b[1].timestamp - a[1].timestamp).map(([ messageID, message ]) => (\n            <Message\n                message={ message }\n                featured={ featured.includes(+messageID) }\n                key={ messageID }\n                messageID={ messageID }\n                tippable={ message.owner !== Utils.tronWeb.defaultAddress.base58 }\n                requiresTronLink={ !this.state.tronWeb.installed }\n                onTip={ this.onMessageTip } />\n        ));\n\n        return (\n          <div>\n            <div className='kontainer'>\n                <div className='header white'>\n                    <img src={TronLogo}></img>\n                    <p>\n                        <strong>波场段子</strong> 是一个可以把你喜欢的段子发上来, 并获得打赏的网站。 每天的打赏第一名都将获得1000Trx奖励。\n                        <br/><br/>\n                        期待你的表演~\n                    </p>\n                </div>\n\n                { this.renderMessageInput() }\n\n                <div className=\"tabs\">\n                  <ul>\n                    <li className=\"is-active\" id=\"tab-all\" onClick={ this.showZuixin }><a>最新</a></li>\n                    <li id=\"tab-my\" className=\"has-text-black\" onClick={ this.showZuire }><a>最热</a></li>\n                  </ul>\n                </div>\n\n                <div id=\"my-content\">\n                  <div className='header'>\n                    <span>按打赏排序top20</span>\n                  </div>\n                  <Featured\n                    recent={ recent }\n                    featured={ featured }\n                    currentAddress={ Utils.tronWeb && Utils.tronWeb.defaultAddress.base58 }\n                    tronLinkInstalled={ this.state.tronWeb.installed }\n                    onTip={ this.onMessageTip } />\n                </div>\n\n                <div id=\"all-content\">\n                <div className='header'>\n                    <span>点击帖子, 可以打赏</span>\n                </div>\n                <div className='messages'>\n                    { messages }\n                </div>\n                </div>\n\n            </div>\n\n\n          <footer class=\"footer\">\n      <div class=\"container\">\n        <div class=\"content has-text-centered\">\n          <p>\n            <small>\n            All rights reserved. <br/>\n            &copy; Copyright 2018\n            <strong>&nbsp;&nbsp;tronjoke.me</strong>\n            </small>\n          </p>\n          <p> Powered by ydapp.io </p>\n        </div>\n      </div>\n    </footer>\n\n\n          </div>\n\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/TronLinkLogo.d3a8f115.png\";","module.exports = __webpack_public_path__ + \"static/media/tronjoke.a6683f35.png\";"],"sourceRoot":""}